// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YiQuJiangHu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_YiQuJiangHu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_YiQuJiangHu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_YiQuJiangHu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_YiQuJiangHu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_YiQuJiangHu_2eproto;
namespace YiQuJiangHuNetData {
class Client_login_out_req;
class Client_login_out_reqDefaultTypeInternal;
extern Client_login_out_reqDefaultTypeInternal _Client_login_out_req_default_instance_;
class Client_login_req;
class Client_login_reqDefaultTypeInternal;
extern Client_login_reqDefaultTypeInternal _Client_login_req_default_instance_;
class Client_ping_req;
class Client_ping_reqDefaultTypeInternal;
extern Client_ping_reqDefaultTypeInternal _Client_ping_req_default_instance_;
class Client_rank_req;
class Client_rank_reqDefaultTypeInternal;
extern Client_rank_reqDefaultTypeInternal _Client_rank_req_default_instance_;
class Client_regist_req;
class Client_regist_reqDefaultTypeInternal;
extern Client_regist_reqDefaultTypeInternal _Client_regist_req_default_instance_;
class Client_save_req;
class Client_save_reqDefaultTypeInternal;
extern Client_save_reqDefaultTypeInternal _Client_save_req_default_instance_;
class Gameinfo;
class GameinfoDefaultTypeInternal;
extern GameinfoDefaultTypeInternal _Gameinfo_default_instance_;
class MsgHead;
class MsgHeadDefaultTypeInternal;
extern MsgHeadDefaultTypeInternal _MsgHead_default_instance_;
class Server_login_out_rsp;
class Server_login_out_rspDefaultTypeInternal;
extern Server_login_out_rspDefaultTypeInternal _Server_login_out_rsp_default_instance_;
class Server_login_rsp;
class Server_login_rspDefaultTypeInternal;
extern Server_login_rspDefaultTypeInternal _Server_login_rsp_default_instance_;
class Server_pong_rsp;
class Server_pong_rspDefaultTypeInternal;
extern Server_pong_rspDefaultTypeInternal _Server_pong_rsp_default_instance_;
class Server_rank_rsp;
class Server_rank_rspDefaultTypeInternal;
extern Server_rank_rspDefaultTypeInternal _Server_rank_rsp_default_instance_;
class Server_regist_rsp;
class Server_regist_rspDefaultTypeInternal;
extern Server_regist_rspDefaultTypeInternal _Server_regist_rsp_default_instance_;
class Server_save_rsp;
class Server_save_rspDefaultTypeInternal;
extern Server_save_rspDefaultTypeInternal _Server_save_rsp_default_instance_;
}  // namespace YiQuJiangHuNetData
PROTOBUF_NAMESPACE_OPEN
template<> ::YiQuJiangHuNetData::Client_login_out_req* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::Client_login_out_req>(Arena*);
template<> ::YiQuJiangHuNetData::Client_login_req* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::Client_login_req>(Arena*);
template<> ::YiQuJiangHuNetData::Client_ping_req* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::Client_ping_req>(Arena*);
template<> ::YiQuJiangHuNetData::Client_rank_req* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::Client_rank_req>(Arena*);
template<> ::YiQuJiangHuNetData::Client_regist_req* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::Client_regist_req>(Arena*);
template<> ::YiQuJiangHuNetData::Client_save_req* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::Client_save_req>(Arena*);
template<> ::YiQuJiangHuNetData::Gameinfo* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::Gameinfo>(Arena*);
template<> ::YiQuJiangHuNetData::MsgHead* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::MsgHead>(Arena*);
template<> ::YiQuJiangHuNetData::Server_login_out_rsp* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::Server_login_out_rsp>(Arena*);
template<> ::YiQuJiangHuNetData::Server_login_rsp* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::Server_login_rsp>(Arena*);
template<> ::YiQuJiangHuNetData::Server_pong_rsp* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::Server_pong_rsp>(Arena*);
template<> ::YiQuJiangHuNetData::Server_rank_rsp* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::Server_rank_rsp>(Arena*);
template<> ::YiQuJiangHuNetData::Server_regist_rsp* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::Server_regist_rsp>(Arena*);
template<> ::YiQuJiangHuNetData::Server_save_rsp* Arena::CreateMaybeMessage<::YiQuJiangHuNetData::Server_save_rsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace YiQuJiangHuNetData {

// ===================================================================

class MsgHead :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.MsgHead) */ {
 public:
  MsgHead();
  virtual ~MsgHead();

  MsgHead(const MsgHead& from);
  MsgHead(MsgHead&& from) noexcept
    : MsgHead() {
    *this = ::std::move(from);
  }

  inline MsgHead& operator=(const MsgHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgHead& operator=(MsgHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgHead& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgHead* internal_default_instance() {
    return reinterpret_cast<const MsgHead*>(
               &_MsgHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgHead& a, MsgHead& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgHead* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgHead* New() const final {
    return CreateMaybeMessage<MsgHead>(nullptr);
  }

  MsgHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgHead>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgHead& from);
  void MergeFrom(const MsgHead& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgHead* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.MsgHead";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtoFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string proto = 1;
  void clear_proto();
  const std::string& proto() const;
  void set_proto(const std::string& value);
  void set_proto(std::string&& value);
  void set_proto(const char* value);
  void set_proto(const char* value, size_t size);
  std::string* mutable_proto();
  std::string* release_proto();
  void set_allocated_proto(std::string* proto);
  private:
  const std::string& _internal_proto() const;
  void _internal_set_proto(const std::string& value);
  std::string* _internal_mutable_proto();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.MsgHead)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// -------------------------------------------------------------------

class Client_ping_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.Client_ping_req) */ {
 public:
  Client_ping_req();
  virtual ~Client_ping_req();

  Client_ping_req(const Client_ping_req& from);
  Client_ping_req(Client_ping_req&& from) noexcept
    : Client_ping_req() {
    *this = ::std::move(from);
  }

  inline Client_ping_req& operator=(const Client_ping_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client_ping_req& operator=(Client_ping_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Client_ping_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Client_ping_req* internal_default_instance() {
    return reinterpret_cast<const Client_ping_req*>(
               &_Client_ping_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Client_ping_req& a, Client_ping_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Client_ping_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client_ping_req* New() const final {
    return CreateMaybeMessage<Client_ping_req>(nullptr);
  }

  Client_ping_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client_ping_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Client_ping_req& from);
  void MergeFrom(const Client_ping_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client_ping_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.Client_ping_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string Msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.Client_ping_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// -------------------------------------------------------------------

class Server_pong_rsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.Server_pong_rsp) */ {
 public:
  Server_pong_rsp();
  virtual ~Server_pong_rsp();

  Server_pong_rsp(const Server_pong_rsp& from);
  Server_pong_rsp(Server_pong_rsp&& from) noexcept
    : Server_pong_rsp() {
    *this = ::std::move(from);
  }

  inline Server_pong_rsp& operator=(const Server_pong_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server_pong_rsp& operator=(Server_pong_rsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Server_pong_rsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server_pong_rsp* internal_default_instance() {
    return reinterpret_cast<const Server_pong_rsp*>(
               &_Server_pong_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Server_pong_rsp& a, Server_pong_rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(Server_pong_rsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server_pong_rsp* New() const final {
    return CreateMaybeMessage<Server_pong_rsp>(nullptr);
  }

  Server_pong_rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server_pong_rsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server_pong_rsp& from);
  void MergeFrom(const Server_pong_rsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server_pong_rsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.Server_pong_rsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string Msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.Server_pong_rsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// -------------------------------------------------------------------

class Client_regist_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.Client_regist_req) */ {
 public:
  Client_regist_req();
  virtual ~Client_regist_req();

  Client_regist_req(const Client_regist_req& from);
  Client_regist_req(Client_regist_req&& from) noexcept
    : Client_regist_req() {
    *this = ::std::move(from);
  }

  inline Client_regist_req& operator=(const Client_regist_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client_regist_req& operator=(Client_regist_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Client_regist_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Client_regist_req* internal_default_instance() {
    return reinterpret_cast<const Client_regist_req*>(
               &_Client_regist_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Client_regist_req& a, Client_regist_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Client_regist_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client_regist_req* New() const final {
    return CreateMaybeMessage<Client_regist_req>(nullptr);
  }

  Client_regist_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client_regist_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Client_regist_req& from);
  void MergeFrom(const Client_regist_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client_regist_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.Client_regist_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.Client_regist_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// -------------------------------------------------------------------

class Server_regist_rsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.Server_regist_rsp) */ {
 public:
  Server_regist_rsp();
  virtual ~Server_regist_rsp();

  Server_regist_rsp(const Server_regist_rsp& from);
  Server_regist_rsp(Server_regist_rsp&& from) noexcept
    : Server_regist_rsp() {
    *this = ::std::move(from);
  }

  inline Server_regist_rsp& operator=(const Server_regist_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server_regist_rsp& operator=(Server_regist_rsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Server_regist_rsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server_regist_rsp* internal_default_instance() {
    return reinterpret_cast<const Server_regist_rsp*>(
               &_Server_regist_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Server_regist_rsp& a, Server_regist_rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(Server_regist_rsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server_regist_rsp* New() const final {
    return CreateMaybeMessage<Server_regist_rsp>(nullptr);
  }

  Server_regist_rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server_regist_rsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server_regist_rsp& from);
  void MergeFrom(const Server_regist_rsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server_regist_rsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.Server_regist_rsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // bool Msg = 1;
  void clear_msg();
  bool msg() const;
  void set_msg(bool value);
  private:
  bool _internal_msg() const;
  void _internal_set_msg(bool value);
  public:

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.Server_regist_rsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// -------------------------------------------------------------------

class Client_login_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.Client_login_req) */ {
 public:
  Client_login_req();
  virtual ~Client_login_req();

  Client_login_req(const Client_login_req& from);
  Client_login_req(Client_login_req&& from) noexcept
    : Client_login_req() {
    *this = ::std::move(from);
  }

  inline Client_login_req& operator=(const Client_login_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client_login_req& operator=(Client_login_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Client_login_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Client_login_req* internal_default_instance() {
    return reinterpret_cast<const Client_login_req*>(
               &_Client_login_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Client_login_req& a, Client_login_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Client_login_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client_login_req* New() const final {
    return CreateMaybeMessage<Client_login_req>(nullptr);
  }

  Client_login_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client_login_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Client_login_req& from);
  void MergeFrom(const Client_login_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client_login_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.Client_login_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.Client_login_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// -------------------------------------------------------------------

class Server_login_rsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.Server_login_rsp) */ {
 public:
  Server_login_rsp();
  virtual ~Server_login_rsp();

  Server_login_rsp(const Server_login_rsp& from);
  Server_login_rsp(Server_login_rsp&& from) noexcept
    : Server_login_rsp() {
    *this = ::std::move(from);
  }

  inline Server_login_rsp& operator=(const Server_login_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server_login_rsp& operator=(Server_login_rsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Server_login_rsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server_login_rsp* internal_default_instance() {
    return reinterpret_cast<const Server_login_rsp*>(
               &_Server_login_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Server_login_rsp& a, Server_login_rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(Server_login_rsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server_login_rsp* New() const final {
    return CreateMaybeMessage<Server_login_rsp>(nullptr);
  }

  Server_login_rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server_login_rsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server_login_rsp& from);
  void MergeFrom(const Server_login_rsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server_login_rsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.Server_login_rsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // bool Msg = 1;
  void clear_msg();
  bool msg() const;
  void set_msg(bool value);
  private:
  bool _internal_msg() const;
  void _internal_set_msg(bool value);
  public:

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.Server_login_rsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// -------------------------------------------------------------------

class Client_login_out_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.Client_login_out_req) */ {
 public:
  Client_login_out_req();
  virtual ~Client_login_out_req();

  Client_login_out_req(const Client_login_out_req& from);
  Client_login_out_req(Client_login_out_req&& from) noexcept
    : Client_login_out_req() {
    *this = ::std::move(from);
  }

  inline Client_login_out_req& operator=(const Client_login_out_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client_login_out_req& operator=(Client_login_out_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Client_login_out_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Client_login_out_req* internal_default_instance() {
    return reinterpret_cast<const Client_login_out_req*>(
               &_Client_login_out_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Client_login_out_req& a, Client_login_out_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Client_login_out_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client_login_out_req* New() const final {
    return CreateMaybeMessage<Client_login_out_req>(nullptr);
  }

  Client_login_out_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client_login_out_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Client_login_out_req& from);
  void MergeFrom(const Client_login_out_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client_login_out_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.Client_login_out_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 1,
  };
  // int64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.Client_login_out_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// -------------------------------------------------------------------

class Server_login_out_rsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.Server_login_out_rsp) */ {
 public:
  Server_login_out_rsp();
  virtual ~Server_login_out_rsp();

  Server_login_out_rsp(const Server_login_out_rsp& from);
  Server_login_out_rsp(Server_login_out_rsp&& from) noexcept
    : Server_login_out_rsp() {
    *this = ::std::move(from);
  }

  inline Server_login_out_rsp& operator=(const Server_login_out_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server_login_out_rsp& operator=(Server_login_out_rsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Server_login_out_rsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server_login_out_rsp* internal_default_instance() {
    return reinterpret_cast<const Server_login_out_rsp*>(
               &_Server_login_out_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Server_login_out_rsp& a, Server_login_out_rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(Server_login_out_rsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server_login_out_rsp* New() const final {
    return CreateMaybeMessage<Server_login_out_rsp>(nullptr);
  }

  Server_login_out_rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server_login_out_rsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server_login_out_rsp& from);
  void MergeFrom(const Server_login_out_rsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server_login_out_rsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.Server_login_out_rsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string Msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.Server_login_out_rsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// -------------------------------------------------------------------

class Gameinfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.Gameinfo) */ {
 public:
  Gameinfo();
  virtual ~Gameinfo();

  Gameinfo(const Gameinfo& from);
  Gameinfo(Gameinfo&& from) noexcept
    : Gameinfo() {
    *this = ::std::move(from);
  }

  inline Gameinfo& operator=(const Gameinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gameinfo& operator=(Gameinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gameinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gameinfo* internal_default_instance() {
    return reinterpret_cast<const Gameinfo*>(
               &_Gameinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Gameinfo& a, Gameinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Gameinfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gameinfo* New() const final {
    return CreateMaybeMessage<Gameinfo>(nullptr);
  }

  Gameinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gameinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gameinfo& from);
  void MergeFrom(const Gameinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gameinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.Gameinfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGidFieldNumber = 1,
    kScoreFieldNumber = 2,
    kIDFieldNumber = 4,
    kChapterFieldNumber = 3,
  };
  // int32 Gid = 1;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 ID = 4;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 Chapter = 3;
  void clear_chapter();
  ::PROTOBUF_NAMESPACE_ID::int32 chapter() const;
  void set_chapter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chapter() const;
  void _internal_set_chapter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.Gameinfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 chapter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// -------------------------------------------------------------------

class Client_save_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.Client_save_req) */ {
 public:
  Client_save_req();
  virtual ~Client_save_req();

  Client_save_req(const Client_save_req& from);
  Client_save_req(Client_save_req&& from) noexcept
    : Client_save_req() {
    *this = ::std::move(from);
  }

  inline Client_save_req& operator=(const Client_save_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client_save_req& operator=(Client_save_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Client_save_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Client_save_req* internal_default_instance() {
    return reinterpret_cast<const Client_save_req*>(
               &_Client_save_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Client_save_req& a, Client_save_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Client_save_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client_save_req* New() const final {
    return CreateMaybeMessage<Client_save_req>(nullptr);
  }

  Client_save_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client_save_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Client_save_req& from);
  void MergeFrom(const Client_save_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client_save_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.Client_save_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 1,
    kChapterFieldNumber = 2,
    kIDFieldNumber = 3,
  };
  // int32 Score = 1;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Chapter = 2;
  void clear_chapter();
  ::PROTOBUF_NAMESPACE_ID::int32 chapter() const;
  void set_chapter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chapter() const;
  void _internal_set_chapter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 ID = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.Client_save_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 chapter_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// -------------------------------------------------------------------

class Server_save_rsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.Server_save_rsp) */ {
 public:
  Server_save_rsp();
  virtual ~Server_save_rsp();

  Server_save_rsp(const Server_save_rsp& from);
  Server_save_rsp(Server_save_rsp&& from) noexcept
    : Server_save_rsp() {
    *this = ::std::move(from);
  }

  inline Server_save_rsp& operator=(const Server_save_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server_save_rsp& operator=(Server_save_rsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Server_save_rsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server_save_rsp* internal_default_instance() {
    return reinterpret_cast<const Server_save_rsp*>(
               &_Server_save_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Server_save_rsp& a, Server_save_rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(Server_save_rsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server_save_rsp* New() const final {
    return CreateMaybeMessage<Server_save_rsp>(nullptr);
  }

  Server_save_rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server_save_rsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server_save_rsp& from);
  void MergeFrom(const Server_save_rsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server_save_rsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.Server_save_rsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string Msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.Server_save_rsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// -------------------------------------------------------------------

class Client_rank_req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.Client_rank_req) */ {
 public:
  Client_rank_req();
  virtual ~Client_rank_req();

  Client_rank_req(const Client_rank_req& from);
  Client_rank_req(Client_rank_req&& from) noexcept
    : Client_rank_req() {
    *this = ::std::move(from);
  }

  inline Client_rank_req& operator=(const Client_rank_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client_rank_req& operator=(Client_rank_req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Client_rank_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Client_rank_req* internal_default_instance() {
    return reinterpret_cast<const Client_rank_req*>(
               &_Client_rank_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Client_rank_req& a, Client_rank_req& b) {
    a.Swap(&b);
  }
  inline void Swap(Client_rank_req* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client_rank_req* New() const final {
    return CreateMaybeMessage<Client_rank_req>(nullptr);
  }

  Client_rank_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client_rank_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Client_rank_req& from);
  void MergeFrom(const Client_rank_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client_rank_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.Client_rank_req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChapterFieldNumber = 1,
  };
  // int64 Chapter = 1;
  void clear_chapter();
  ::PROTOBUF_NAMESPACE_ID::int64 chapter() const;
  void set_chapter(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_chapter() const;
  void _internal_set_chapter(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.Client_rank_req)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 chapter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// -------------------------------------------------------------------

class Server_rank_rsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YiQuJiangHuNetData.Server_rank_rsp) */ {
 public:
  Server_rank_rsp();
  virtual ~Server_rank_rsp();

  Server_rank_rsp(const Server_rank_rsp& from);
  Server_rank_rsp(Server_rank_rsp&& from) noexcept
    : Server_rank_rsp() {
    *this = ::std::move(from);
  }

  inline Server_rank_rsp& operator=(const Server_rank_rsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server_rank_rsp& operator=(Server_rank_rsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Server_rank_rsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server_rank_rsp* internal_default_instance() {
    return reinterpret_cast<const Server_rank_rsp*>(
               &_Server_rank_rsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Server_rank_rsp& a, Server_rank_rsp& b) {
    a.Swap(&b);
  }
  inline void Swap(Server_rank_rsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server_rank_rsp* New() const final {
    return CreateMaybeMessage<Server_rank_rsp>(nullptr);
  }

  Server_rank_rsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server_rank_rsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server_rank_rsp& from);
  void MergeFrom(const Server_rank_rsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server_rank_rsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YiQuJiangHuNetData.Server_rank_rsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_YiQuJiangHu_2eproto);
    return ::descriptor_table_YiQuJiangHu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .YiQuJiangHuNetData.Gameinfo Datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::YiQuJiangHuNetData::Gameinfo* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YiQuJiangHuNetData::Gameinfo >*
      mutable_datas();
  private:
  const ::YiQuJiangHuNetData::Gameinfo& _internal_datas(int index) const;
  ::YiQuJiangHuNetData::Gameinfo* _internal_add_datas();
  public:
  const ::YiQuJiangHuNetData::Gameinfo& datas(int index) const;
  ::YiQuJiangHuNetData::Gameinfo* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YiQuJiangHuNetData::Gameinfo >&
      datas() const;

  // @@protoc_insertion_point(class_scope:YiQuJiangHuNetData.Server_rank_rsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YiQuJiangHuNetData::Gameinfo > datas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_YiQuJiangHu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgHead

// string proto = 1;
inline void MsgHead::clear_proto() {
  proto_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MsgHead::proto() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.MsgHead.proto)
  return _internal_proto();
}
inline void MsgHead::set_proto(const std::string& value) {
  _internal_set_proto(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.MsgHead.proto)
}
inline std::string* MsgHead::mutable_proto() {
  // @@protoc_insertion_point(field_mutable:YiQuJiangHuNetData.MsgHead.proto)
  return _internal_mutable_proto();
}
inline const std::string& MsgHead::_internal_proto() const {
  return proto_.GetNoArena();
}
inline void MsgHead::_internal_set_proto(const std::string& value) {
  
  proto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MsgHead::set_proto(std::string&& value) {
  
  proto_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YiQuJiangHuNetData.MsgHead.proto)
}
inline void MsgHead::set_proto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YiQuJiangHuNetData.MsgHead.proto)
}
inline void MsgHead::set_proto(const char* value, size_t size) {
  
  proto_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YiQuJiangHuNetData.MsgHead.proto)
}
inline std::string* MsgHead::_internal_mutable_proto() {
  
  return proto_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgHead::release_proto() {
  // @@protoc_insertion_point(field_release:YiQuJiangHuNetData.MsgHead.proto)
  
  return proto_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgHead::set_allocated_proto(std::string* proto) {
  if (proto != nullptr) {
    
  } else {
    
  }
  proto_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto);
  // @@protoc_insertion_point(field_set_allocated:YiQuJiangHuNetData.MsgHead.proto)
}

// bytes data = 2;
inline void MsgHead::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MsgHead::data() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.MsgHead.data)
  return _internal_data();
}
inline void MsgHead::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.MsgHead.data)
}
inline std::string* MsgHead::mutable_data() {
  // @@protoc_insertion_point(field_mutable:YiQuJiangHuNetData.MsgHead.data)
  return _internal_mutable_data();
}
inline const std::string& MsgHead::_internal_data() const {
  return data_.GetNoArena();
}
inline void MsgHead::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MsgHead::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YiQuJiangHuNetData.MsgHead.data)
}
inline void MsgHead::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YiQuJiangHuNetData.MsgHead.data)
}
inline void MsgHead::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YiQuJiangHuNetData.MsgHead.data)
}
inline std::string* MsgHead::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgHead::release_data() {
  // @@protoc_insertion_point(field_release:YiQuJiangHuNetData.MsgHead.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgHead::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:YiQuJiangHuNetData.MsgHead.data)
}

// -------------------------------------------------------------------

// Client_ping_req

// string Msg = 1;
inline void Client_ping_req::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client_ping_req::msg() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Client_ping_req.Msg)
  return _internal_msg();
}
inline void Client_ping_req::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Client_ping_req.Msg)
}
inline std::string* Client_ping_req::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:YiQuJiangHuNetData.Client_ping_req.Msg)
  return _internal_mutable_msg();
}
inline const std::string& Client_ping_req::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void Client_ping_req::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client_ping_req::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YiQuJiangHuNetData.Client_ping_req.Msg)
}
inline void Client_ping_req::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YiQuJiangHuNetData.Client_ping_req.Msg)
}
inline void Client_ping_req::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YiQuJiangHuNetData.Client_ping_req.Msg)
}
inline std::string* Client_ping_req::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client_ping_req::release_msg() {
  // @@protoc_insertion_point(field_release:YiQuJiangHuNetData.Client_ping_req.Msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client_ping_req::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:YiQuJiangHuNetData.Client_ping_req.Msg)
}

// -------------------------------------------------------------------

// Server_pong_rsp

// string Msg = 1;
inline void Server_pong_rsp::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Server_pong_rsp::msg() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Server_pong_rsp.Msg)
  return _internal_msg();
}
inline void Server_pong_rsp::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Server_pong_rsp.Msg)
}
inline std::string* Server_pong_rsp::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:YiQuJiangHuNetData.Server_pong_rsp.Msg)
  return _internal_mutable_msg();
}
inline const std::string& Server_pong_rsp::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void Server_pong_rsp::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Server_pong_rsp::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YiQuJiangHuNetData.Server_pong_rsp.Msg)
}
inline void Server_pong_rsp::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YiQuJiangHuNetData.Server_pong_rsp.Msg)
}
inline void Server_pong_rsp::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YiQuJiangHuNetData.Server_pong_rsp.Msg)
}
inline std::string* Server_pong_rsp::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Server_pong_rsp::release_msg() {
  // @@protoc_insertion_point(field_release:YiQuJiangHuNetData.Server_pong_rsp.Msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Server_pong_rsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:YiQuJiangHuNetData.Server_pong_rsp.Msg)
}

// -------------------------------------------------------------------

// Client_regist_req

// string Name = 1;
inline void Client_regist_req::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client_regist_req::name() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Client_regist_req.Name)
  return _internal_name();
}
inline void Client_regist_req::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Client_regist_req.Name)
}
inline std::string* Client_regist_req::mutable_name() {
  // @@protoc_insertion_point(field_mutable:YiQuJiangHuNetData.Client_regist_req.Name)
  return _internal_mutable_name();
}
inline const std::string& Client_regist_req::_internal_name() const {
  return name_.GetNoArena();
}
inline void Client_regist_req::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client_regist_req::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YiQuJiangHuNetData.Client_regist_req.Name)
}
inline void Client_regist_req::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YiQuJiangHuNetData.Client_regist_req.Name)
}
inline void Client_regist_req::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YiQuJiangHuNetData.Client_regist_req.Name)
}
inline std::string* Client_regist_req::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client_regist_req::release_name() {
  // @@protoc_insertion_point(field_release:YiQuJiangHuNetData.Client_regist_req.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client_regist_req::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:YiQuJiangHuNetData.Client_regist_req.Name)
}

// string Password = 2;
inline void Client_regist_req::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client_regist_req::password() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Client_regist_req.Password)
  return _internal_password();
}
inline void Client_regist_req::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Client_regist_req.Password)
}
inline std::string* Client_regist_req::mutable_password() {
  // @@protoc_insertion_point(field_mutable:YiQuJiangHuNetData.Client_regist_req.Password)
  return _internal_mutable_password();
}
inline const std::string& Client_regist_req::_internal_password() const {
  return password_.GetNoArena();
}
inline void Client_regist_req::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client_regist_req::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YiQuJiangHuNetData.Client_regist_req.Password)
}
inline void Client_regist_req::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YiQuJiangHuNetData.Client_regist_req.Password)
}
inline void Client_regist_req::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YiQuJiangHuNetData.Client_regist_req.Password)
}
inline std::string* Client_regist_req::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client_regist_req::release_password() {
  // @@protoc_insertion_point(field_release:YiQuJiangHuNetData.Client_regist_req.Password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client_regist_req::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:YiQuJiangHuNetData.Client_regist_req.Password)
}

// -------------------------------------------------------------------

// Server_regist_rsp

// bool Msg = 1;
inline void Server_regist_rsp::clear_msg() {
  msg_ = false;
}
inline bool Server_regist_rsp::_internal_msg() const {
  return msg_;
}
inline bool Server_regist_rsp::msg() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Server_regist_rsp.Msg)
  return _internal_msg();
}
inline void Server_regist_rsp::_internal_set_msg(bool value) {
  
  msg_ = value;
}
inline void Server_regist_rsp::set_msg(bool value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Server_regist_rsp.Msg)
}

// -------------------------------------------------------------------

// Client_login_req

// string Name = 1;
inline void Client_login_req::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client_login_req::name() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Client_login_req.Name)
  return _internal_name();
}
inline void Client_login_req::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Client_login_req.Name)
}
inline std::string* Client_login_req::mutable_name() {
  // @@protoc_insertion_point(field_mutable:YiQuJiangHuNetData.Client_login_req.Name)
  return _internal_mutable_name();
}
inline const std::string& Client_login_req::_internal_name() const {
  return name_.GetNoArena();
}
inline void Client_login_req::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client_login_req::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YiQuJiangHuNetData.Client_login_req.Name)
}
inline void Client_login_req::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YiQuJiangHuNetData.Client_login_req.Name)
}
inline void Client_login_req::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YiQuJiangHuNetData.Client_login_req.Name)
}
inline std::string* Client_login_req::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client_login_req::release_name() {
  // @@protoc_insertion_point(field_release:YiQuJiangHuNetData.Client_login_req.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client_login_req::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:YiQuJiangHuNetData.Client_login_req.Name)
}

// string Password = 2;
inline void Client_login_req::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Client_login_req::password() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Client_login_req.Password)
  return _internal_password();
}
inline void Client_login_req::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Client_login_req.Password)
}
inline std::string* Client_login_req::mutable_password() {
  // @@protoc_insertion_point(field_mutable:YiQuJiangHuNetData.Client_login_req.Password)
  return _internal_mutable_password();
}
inline const std::string& Client_login_req::_internal_password() const {
  return password_.GetNoArena();
}
inline void Client_login_req::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Client_login_req::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YiQuJiangHuNetData.Client_login_req.Password)
}
inline void Client_login_req::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YiQuJiangHuNetData.Client_login_req.Password)
}
inline void Client_login_req::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YiQuJiangHuNetData.Client_login_req.Password)
}
inline std::string* Client_login_req::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Client_login_req::release_password() {
  // @@protoc_insertion_point(field_release:YiQuJiangHuNetData.Client_login_req.Password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Client_login_req::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:YiQuJiangHuNetData.Client_login_req.Password)
}

// -------------------------------------------------------------------

// Server_login_rsp

// bool Msg = 1;
inline void Server_login_rsp::clear_msg() {
  msg_ = false;
}
inline bool Server_login_rsp::_internal_msg() const {
  return msg_;
}
inline bool Server_login_rsp::msg() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Server_login_rsp.Msg)
  return _internal_msg();
}
inline void Server_login_rsp::_internal_set_msg(bool value) {
  
  msg_ = value;
}
inline void Server_login_rsp::set_msg(bool value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Server_login_rsp.Msg)
}

// -------------------------------------------------------------------

// Client_login_out_req

// int64 ID = 1;
inline void Client_login_out_req::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Client_login_out_req::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Client_login_out_req::id() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Client_login_out_req.ID)
  return _internal_id();
}
inline void Client_login_out_req::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Client_login_out_req::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Client_login_out_req.ID)
}

// -------------------------------------------------------------------

// Server_login_out_rsp

// string Msg = 1;
inline void Server_login_out_rsp::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Server_login_out_rsp::msg() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Server_login_out_rsp.Msg)
  return _internal_msg();
}
inline void Server_login_out_rsp::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Server_login_out_rsp.Msg)
}
inline std::string* Server_login_out_rsp::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:YiQuJiangHuNetData.Server_login_out_rsp.Msg)
  return _internal_mutable_msg();
}
inline const std::string& Server_login_out_rsp::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void Server_login_out_rsp::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Server_login_out_rsp::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YiQuJiangHuNetData.Server_login_out_rsp.Msg)
}
inline void Server_login_out_rsp::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YiQuJiangHuNetData.Server_login_out_rsp.Msg)
}
inline void Server_login_out_rsp::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YiQuJiangHuNetData.Server_login_out_rsp.Msg)
}
inline std::string* Server_login_out_rsp::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Server_login_out_rsp::release_msg() {
  // @@protoc_insertion_point(field_release:YiQuJiangHuNetData.Server_login_out_rsp.Msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Server_login_out_rsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:YiQuJiangHuNetData.Server_login_out_rsp.Msg)
}

// -------------------------------------------------------------------

// Gameinfo

// int32 Gid = 1;
inline void Gameinfo::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Gameinfo::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Gameinfo::gid() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Gameinfo.Gid)
  return _internal_gid();
}
inline void Gameinfo::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void Gameinfo::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Gameinfo.Gid)
}

// int32 Score = 2;
inline void Gameinfo::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Gameinfo::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Gameinfo::score() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Gameinfo.Score)
  return _internal_score();
}
inline void Gameinfo::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void Gameinfo::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Gameinfo.Score)
}

// int32 Chapter = 3;
inline void Gameinfo::clear_chapter() {
  chapter_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Gameinfo::_internal_chapter() const {
  return chapter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Gameinfo::chapter() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Gameinfo.Chapter)
  return _internal_chapter();
}
inline void Gameinfo::_internal_set_chapter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chapter_ = value;
}
inline void Gameinfo::set_chapter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chapter(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Gameinfo.Chapter)
}

// int64 ID = 4;
inline void Gameinfo::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Gameinfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Gameinfo::id() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Gameinfo.ID)
  return _internal_id();
}
inline void Gameinfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Gameinfo::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Gameinfo.ID)
}

// -------------------------------------------------------------------

// Client_save_req

// int32 Score = 1;
inline void Client_save_req::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client_save_req::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client_save_req::score() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Client_save_req.Score)
  return _internal_score();
}
inline void Client_save_req::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void Client_save_req::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Client_save_req.Score)
}

// int32 Chapter = 2;
inline void Client_save_req::clear_chapter() {
  chapter_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client_save_req::_internal_chapter() const {
  return chapter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Client_save_req::chapter() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Client_save_req.Chapter)
  return _internal_chapter();
}
inline void Client_save_req::_internal_set_chapter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chapter_ = value;
}
inline void Client_save_req::set_chapter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chapter(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Client_save_req.Chapter)
}

// int64 ID = 3;
inline void Client_save_req::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Client_save_req::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Client_save_req::id() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Client_save_req.ID)
  return _internal_id();
}
inline void Client_save_req::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Client_save_req::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Client_save_req.ID)
}

// -------------------------------------------------------------------

// Server_save_rsp

// string Msg = 1;
inline void Server_save_rsp::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Server_save_rsp::msg() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Server_save_rsp.Msg)
  return _internal_msg();
}
inline void Server_save_rsp::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Server_save_rsp.Msg)
}
inline std::string* Server_save_rsp::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:YiQuJiangHuNetData.Server_save_rsp.Msg)
  return _internal_mutable_msg();
}
inline const std::string& Server_save_rsp::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void Server_save_rsp::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Server_save_rsp::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:YiQuJiangHuNetData.Server_save_rsp.Msg)
}
inline void Server_save_rsp::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YiQuJiangHuNetData.Server_save_rsp.Msg)
}
inline void Server_save_rsp::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YiQuJiangHuNetData.Server_save_rsp.Msg)
}
inline std::string* Server_save_rsp::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Server_save_rsp::release_msg() {
  // @@protoc_insertion_point(field_release:YiQuJiangHuNetData.Server_save_rsp.Msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Server_save_rsp::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:YiQuJiangHuNetData.Server_save_rsp.Msg)
}

// -------------------------------------------------------------------

// Client_rank_req

// int64 Chapter = 1;
inline void Client_rank_req::clear_chapter() {
  chapter_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Client_rank_req::_internal_chapter() const {
  return chapter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Client_rank_req::chapter() const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Client_rank_req.Chapter)
  return _internal_chapter();
}
inline void Client_rank_req::_internal_set_chapter(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  chapter_ = value;
}
inline void Client_rank_req::set_chapter(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_chapter(value);
  // @@protoc_insertion_point(field_set:YiQuJiangHuNetData.Client_rank_req.Chapter)
}

// -------------------------------------------------------------------

// Server_rank_rsp

// repeated .YiQuJiangHuNetData.Gameinfo Datas = 1;
inline int Server_rank_rsp::_internal_datas_size() const {
  return datas_.size();
}
inline int Server_rank_rsp::datas_size() const {
  return _internal_datas_size();
}
inline void Server_rank_rsp::clear_datas() {
  datas_.Clear();
}
inline ::YiQuJiangHuNetData::Gameinfo* Server_rank_rsp::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:YiQuJiangHuNetData.Server_rank_rsp.Datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YiQuJiangHuNetData::Gameinfo >*
Server_rank_rsp::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:YiQuJiangHuNetData.Server_rank_rsp.Datas)
  return &datas_;
}
inline const ::YiQuJiangHuNetData::Gameinfo& Server_rank_rsp::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::YiQuJiangHuNetData::Gameinfo& Server_rank_rsp::datas(int index) const {
  // @@protoc_insertion_point(field_get:YiQuJiangHuNetData.Server_rank_rsp.Datas)
  return _internal_datas(index);
}
inline ::YiQuJiangHuNetData::Gameinfo* Server_rank_rsp::_internal_add_datas() {
  return datas_.Add();
}
inline ::YiQuJiangHuNetData::Gameinfo* Server_rank_rsp::add_datas() {
  // @@protoc_insertion_point(field_add:YiQuJiangHuNetData.Server_rank_rsp.Datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YiQuJiangHuNetData::Gameinfo >&
Server_rank_rsp::datas() const {
  // @@protoc_insertion_point(field_list:YiQuJiangHuNetData.Server_rank_rsp.Datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace YiQuJiangHuNetData

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_YiQuJiangHu_2eproto
